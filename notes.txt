https://css-tricks.com/snippets/css/complete-guide-grid/

https://cssgridgarden.com/

create *grid container* by declaring
display: grid 
or
display: grid-inline
on an element - all direct children of THAT element become *grid items*
define the rows and columns with properties
grid-template-columns
grid-template-rows
*grid track* is the space between any two lines on the grid - one x width block or y height block
defining 
grid-template-columns: 200px 200px 200px;
will divide the grid items into three 200 pixel columns
*fr* unit - fraction of remaining space in the grid container, not including defined space for other columns or rows - 
defining
grid-template-columns: 1fr 1fr 1fr;
will divide the grid into three equal space columns
can be written as ->
grid-template-columns: repeat(3, fr);
defining
grid-template-columns: 2fr 1fr 1fr;
will divide the grid into four equal spaces and divide them with two parts of the remaining space in the first column and one part to two other columns, resulting in three total columns and one twice the size of the other two

The first track is 500 pixels, so the fixed width is taken away from the available space. The remaining space is divided into three and assigned in proportion to the two flexible tracks.  
.wrapper {   display: grid;   grid-template-columns: 500px 1fr 2fr; }

parts of the grid that aren't explicitly defined can be targeted by using
grid-auto-rows or grid-auto-columns
using minmax() function on the grid-auto-rows controls the size of autogenerated grid tracks
grid-auto-rows: minmax(100px, auto);
will means that automatically created rows will be a minimum of 100px tall and a maximum of auto (the whole row will adjust to the size of the largest one)

*grid lines* 
when defining a grid we define grid tracks not lines. first one will be top or left border, second grid track is below or to the right, third beyond that. 
a 3x4 grid track will create a 2x3 grid

when placing a grid item, the line is targeted, not the track
using - grid-column-start, grid-column-end, grid-row-start, grid-row-end
ex -
.box1 {   grid-column-start: 1;   grid-column-end: 4;   grid-row-start: 1;   grid-row-end: 3; }

*grid cell* - smallest unit on the grid
*grid area* - items that span one or more rows or columns

*gutters* or *alleys* - created between cells/areas/tracks by using
grid-column-gap and grid-column-row
ex -
.wrapper {   display: grid;   grid-template-columns: repeat(3, 1fr);   grid-column-gap: 10px;   grid-row-gap: 1em; }

nesting grids - just add the css. you make leetle grids inside the beeg grids, it works like how you'd hope it would - cleanly and easily

grid items can occupy the same cell - define the z index - "z-index: 1;" 


